---
// Accordion.astro
const { items, id } = Astro.props;
---

<style>
  .accordion-content {
    overflow: hidden;
    height: 0;
    transition: height 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
</style>

<div id={`accordion-container-${id}`} data-id={id} class="w-full overflow-hidden">
  {
    items.map((item, index) => (
      <div class="border-b border-black">
        <button
          class="flex cursor-pointer items-center justify-between w-full py-4 px-4 text-left font-semibold focus:outline-none group"
          data-index={index}>
          <div class="flex items-center">
            <span>{item.title}</span>
          </div>
          <svg
            class="w-5 h-5 transform transition-transform duration-300 group-aria-expanded:rotate-180"
            fill="none"
            viewBox="0 0 24 24"
            stroke-width="1.5"
            stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
          </svg>
        </button>
        <div class="accordion-content px-4" data-content-index={index}>
          <p class="py-4 opacity-0 transition-opacity duration-200">{item.content}</p>
        </div>
      </div>
    ))
  }
</div>
<script is:raw>
  const accordions = document.querySelectorAll(".accordion-container-" + {id});

  accordions.forEach((container) => {
    const headers = container.querySelectorAll("> div > button");

    headers.forEach((header) => {
      header.addEventListener("click", () => {
        const index = header.dataset.index;
        const content = container.querySelector(`[data-content-index="${index}"]`);
        const isExpanded = header.getAttribute("aria-expanded") === "true";

        // Close other items in this accordion
        headers.forEach((otherHeader) => {
          if (otherHeader !== header) {
            const otherIndex = otherHeader.dataset.index;
            const otherContent = container.querySelector(`[data-content-index="${otherIndex}"]`);
            otherHeader.setAttribute("aria-expanded", "false");
            gsap.to(otherContent, {
              height: 0,
              duration: 0.3,
              ease: "power2.out",
              onComplete: () => {
                gsap.to(otherContent.querySelector("p"), { opacity: 0, duration: 0.1 });
              },
            });
          }
        });

        // Toggle the clicked item
        header.setAttribute("aria-expanded", !isExpanded);
        const contentHeight = content.scrollHeight;

        gsap
          .timeline()
          .to(content, {
            height: isExpanded ? 0 : contentHeight,
            duration: 0.3,
            ease: "power2.out",
          })
          .to(
            content.querySelector("p"),
            {
              opacity: isExpanded ? 0 : 1,
              duration: 0.2,
              delay: isExpanded ? 0 : -0.2,
            },
            0
          );
      });
    });
  });
</script>
